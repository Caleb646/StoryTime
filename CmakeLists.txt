
cmake_minimum_required(VERSION 3.27.1)
project(storyt VERSION 0.1.0)

include(cmake/storytCompilerWarnings.cmake)
# ---------------------------------------------------------------------------------------
# Provides a set of variables containing installation directories for various artifacts
# ---------------------------------------------------------------------------------------
include(GNUInstallDirs)
# ---------------------------------------------------------------------------------------
# CMake package containing the macros parsing versions is included.
# ---------------------------------------------------------------------------------------
include(CMakePackageConfigHelpers)
include(FetchContent)


set(CMAKE_CXX_STANDARD 20)
option(STORYT_BUILD_TEST off)
set(STORYT_BUILD_SPDLOG true)

# ---------------------------------------------------------------------------------------
# Set default build to release
# ---------------------------------------------------------------------------------------
#if(NOT CMAKE_BUILD_TYPE)
#   set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose Release or Debug" FORCE)
#endif()
#-----

# ---------------------------------------------------------------------------------------
# Set STORYT_MASTER_PROJECT to ON if we are building spdlog
# ---------------------------------------------------------------------------------------
# Check if spdlog is being used directly or via add_subdirectory, but allow overriding
if(NOT DEFINED STORYT_MASTER_PROJECT)
    if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
        set(STORYT_MASTER_PROJECT ON)
    else()
        set(STORYT_MASTER_PROJECT OFF)
    endif()
endif()

option(STORYT_BUILD_EXAMPLE "Build example" ${STORYT_MASTER_PROJECT})
option(STORYT_INSTALL "Generate the install target" ${STORYT_MASTER_PROJECT})

# ---------------------------------------------------------------------------------------
# If the top level cmake project is our project and BUILDING_TESTING is true then fetch and install
# Googletest and set STORYTIME_BUILD_SPDLOG to false.
# ---------------------------------------------------------------------------------------
if((CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME OR STORYT_BUILD_TEST) AND BUILD_TESTING) 
    include(CTest) 
    add_subdirectory("test")
    # Google Test and SPDLog do not like each other so only build one or the other.
    set(STORYT_BUILD_SPDLOG false)
endif()


# ---------------------------------------------------------------------------------------
# Source: https://github.com/madler/zlib/issues/759
# Zlib has a bunch of examples that will be built without using this macro
# ---------------------------------------------------------------------------------------
macro(FetchContent_MakeAvailableExcludeFromAll)
    foreach(contentName IN ITEMS ${ARGV})
        string(TOLOWER ${contentName} contentNameLower)
        FetchContent_GetProperties(${contentName})
        if(NOT ${contentNameLower}_POPULATED)
            FetchContent_Populate(${contentName})
            if(EXISTS ${${contentNameLower}_SOURCE_DIR}/CMakeLists.txt)
                add_subdirectory(${${contentNameLower}_SOURCE_DIR}
                    ${${contentNameLower}_BINARY_DIR} EXCLUDE_FROM_ALL)
                    # ---------------------------------------------------------------------------------------
                    # EXCLUDE_FROM_ALL keeps the examples from being built
                    # ---------------------------------------------------------------------------------------
            endif()
        endif()
    endforeach()
endmacro()


FetchContent_Declare(
    zlib
    URL https://www.zlib.net/zlib-1.2.13.tar.gz
        https://www.zlib.net/fossils/zlib-1.2.13.tar.gz
        https://github.com/madler/zlib/releases/download/v1.2.13/zlib-1.2.13.tar.gz
)
FetchContent_MakeAvailableExcludeFromAll(zlib)
# ---------------------------------------------------------------------------------------
# Add zlib include directories
# ---------------------------------------------------------------------------------------
target_include_directories(zlibstatic INTERFACE ${zlib_BINARY_DIR} ${zlib_SOURCE_DIR})

# ---------------------------------------------------------------------------------------
# The keyword INTERFACE makes the target a header-only library that does not need to be compiled.
# ---------------------------------------------------------------------------------------
add_library(storyt INTERFACE)
add_library(storyt::storyt ALIAS storyt)
# ---------------------------------------------------------------------------------------
# $<BUILD_INTERFACE:SI_SOURCE_DIR}/include> tells CMake that if the library is used directly by another 
# CMake target (such as when building tests for the library or when it is included as a subdirectory), 
# then the include path is ${PROJECT_SOURCE_DIR}/include} which is a nested variable.
# ---------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------
# $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}> defines the path if the project is installed.
# ---------------------------------------------------------------------------------------
target_include_directories(
  storyt
  INTERFACE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
            $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)
target_link_libraries(storyt INTERFACE zlibstatic)
# ---------------------------------------------------------------------------------------
# Specifies compiler features to be enabled in a compiler-agnostic way.
# ---------------------------------------------------------------------------------------
target_compile_features(storyt INTERFACE cxx_std_20)


if(STORYT_MASTER_PROJECT)
    project(storyt_example)
    add_executable(storyt_example "example/main.cpp")
    target_compile_options(storyt_example PUBLIC ${STORYT_CLANG_WARNINGS})
    target_link_libraries(storyt_example PRIVATE storyt::storyt)

    if(STORYT_BUILD_SPDLOG)
        # ---------------------------------------------------------------------------------------
        # If building with SPDLog then fetch and install it.
        # ---------------------------------------------------------------------------------------
        FetchContent_Declare(
          spdlog
          GIT_REPOSITORY https://github.com/gabime/spdlog.git
          GIT_TAG v1.12.0
        )
        FetchContent_MakeAvailable(spdlog)
        target_link_libraries(storyt_example PRIVATE spdlog::spdlog)
        add_compile_definitions(STORYT_BUILD_SPDLOG_=true)
    endif()
endif()

