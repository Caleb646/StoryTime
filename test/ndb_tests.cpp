#include <iostream>
#include <fstream>
#include <stdarg.h>
#include <cassert>
#include <vector>

#include <gtest/gtest.h>

#include "types.h"
#include "utils.h"
#include "core.h"
#include "ndb.h"

namespace ndb_tests
{
	using namespace storyt::types;
	using namespace storyt::utils;
	using namespace storyt::core;
	using namespace storyt::ndb;

	const std::vector<byte_t> sample_btpage = {
   0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x41, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x22, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

   0x03, 0x14, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, // BTPage Structure
   0x81, 0x81, 0x06, 0x80, 0x64, 0xB1, 0xE8, 0x02, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Page trailer
	};

	const std::vector<byte_t> sample_nbtentryPage = {

	  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// nid = 1
	  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// bidData = 2
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// bidSub = 0
	  0x00, 0x00, 0x00, 0x00,							// parentNid = 0	
	  0x00, 0x00, 0x00, 0x00,							// dwPadding = 0

	  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// nid = 2
	  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// bidData = 4
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// bidSub = 0
	  0x00, 0x00, 0x00, 0x00,							// parentNid = 0	
	  0x00, 0x00, 0x00, 0x00,							// dwPadding = 0

	  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// nid = 5
	  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// bidData = 6
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// bidSub = 0
	  0x00, 0x00, 0x00, 0x00,							// parentNid = 0	
	  0x00, 0x00, 0x00, 0x00,							// dwPadding = 0

	  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// nid = 7
	  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// bidData = 8
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// bidSub = 0
	  0x00, 0x00, 0x00, 0x00,							// parentNid = 0	
	  0x00, 0x00, 0x00, 0x00,							// dwPadding = 0

	  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// nid = 9
	  0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// bidData = 10
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// bidSub = 0
	  0x00, 0x00, 0x00, 0x00,							// parentNid = 0	
	  0x00, 0x00, 0x00, 0x00,							// dwPadding = 0

	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,


	  0x05, 0x0F, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // BTPage Structure
	  0x81, 0x81, 0x6B, 0x70, 0x49, 0x19, 0xC2, 0x39, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Page Trailer
	};

	const std::vector<byte_t> sample_bbtentryPage = {
	 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Bref
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Bref
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Bref
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Bref
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Bref
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	 0x05, 0x14, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, // BTPage Structure
	 0x80, 0x80, 0xD6, 0x00, 0x2F, 0xA0, 0xF6, 0xA1, 0x46, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Page Trailer
	};

	TEST(BTPageTest, BTPageTestInit)
	{
		const BTPage btpage = BTPage::Init(sample_btpage);
		ASSERT_EQ(btpage.cLevel, 1);
		ASSERT_EQ(btpage.rgentries.size(), 3);
		ASSERT_EQ(btpage.singleEntrySize, 0x18);
		ASSERT_EQ(btpage.maxNEntries, 0x14);
		ASSERT_EQ(btpage.hasBTEntries(), true);

		const BTPage nbtpage = BTPage::Init(sample_nbtentryPage);
		ASSERT_EQ(nbtpage.cLevel, 0);
		ASSERT_EQ(nbtpage.rgentries.size(), 0x05);
		ASSERT_EQ(nbtpage.nEntries, 0x05);
		ASSERT_EQ(nbtpage.singleEntrySize, 0x20);
		ASSERT_EQ(nbtpage.maxNEntries, 0x0F);
		ASSERT_EQ(nbtpage.hasNBTEntries(), true);

		uint32_t odd = 1;
		uint32_t even = 2;
		for (const auto& entry : nbtpage.rgentries)
		{
			const NBTEntry& nbt = entry.asNBTEntry();
			ASSERT_EQ(nbt.nid, NID(odd));
			ASSERT_EQ(nbt.bidData, BID(even));
			ASSERT_EQ(nbt.bidSub, BID(0));
			ASSERT_EQ(nbt.nidParent, NID(0));
			odd += 2;
			even += 2;
		}

		const BTPage bbtpage = BTPage::Init(sample_bbtentryPage);
		ASSERT_EQ(bbtpage.cLevel, 0);
		ASSERT_EQ(bbtpage.rgentries.size(), 5);
		ASSERT_EQ(bbtpage.nEntries, 5);
		ASSERT_EQ(bbtpage.singleEntrySize, 0x18);
		ASSERT_EQ(bbtpage.maxNEntries, 0x14);
		ASSERT_EQ(bbtpage.hasBBTEntries(), true);

		even = 2;
		for (const auto& entry : bbtpage.rgentries)
		{
			const BBTEntry& bbt = entry.asBBTEntry();
			ASSERT_EQ(bbt.bref.bid, BID(even));
			even += 2;
		}
	}

	TEST(BTPageTest, BTPageSearchNidBid)
	{
		const BTPage btpage = BTPage::Init(sample_btpage);
		const BTPage nbtpage = BTPage::Init(sample_nbtentryPage);
		const BTPage bbtpage = BTPage::Init(sample_bbtentryPage);
		int odd, even;
		odd = 1;
		even = 2;
		for (const auto& entry : nbtpage.rgentries)
		{
			const NBTEntry nbt = nbtpage.get<NBTEntry>(NID(odd)).value();
			const BBTEntry& bbt = bbtpage.get<BBTEntry>(nbt.bidData).value();
			ASSERT_EQ(nbt.nid, NID(odd));
			ASSERT_EQ(nbt.bidData, BID(even));
			ASSERT_EQ(bbt.bref.bid, BID(even));
			odd += 2;
			even += 2;
		}
	}
};